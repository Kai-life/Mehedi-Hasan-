#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 3.0
#______CODING BY: ASHEKUR RAHAMAN
#______GITHUB : https://github.com/RX-ASHIK?tab=repositories
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b''))